{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;;;;;;;;;;;;;;;ACZ0D;AAChB;AA6L1C;IAwHE,sBACU,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QAtH3B,wBAAmB,GAA2B;YACnD,UAAU,EAAE,aAAa;YACzB,OAAO,EAAE,YAAY;YACrB,SAAS,EAAE,0BAA0B;YACrC,MAAM,EAAE,KAAK;YACb,WAAW,EAAE,WAAW;YACxB,UAAU,EAAE,kBAAkB;YAC9B,SAAS,EAAE,aAAa;YACxB,WAAW,EAAE,2BAA2B;YACxC,WAAW,EAAE,sBAAsB;YACnC,WAAW,EAAE,sBAAsB;YACnC,aAAa,EAAE,mDAAmD;YAClE,GAAG,EAAE,aAAa;YAClB,IAAI,EAAE,QAAQ;YACd,OAAO,EAAE,QAAQ;YACjB,cAAc,EAAE,oBAAoB;YACpC,YAAY,EAAE,qBAAqB;YACnC,eAAe,EAAE,cAAc;YAC/B,mBAAmB,EAAE,eAAe;YACpC,YAAY,EAAE,cAAc;YAC5B,gBAAgB,EAAE,eAAe;YACjC,aAAa,EAAE,cAAc;YAC7B,iBAAiB,EAAE,eAAe;YAClC,YAAY,EAAE,cAAc;YAC5B,gBAAgB,EAAE,UAAU;SAC7B,CAAC;QAEK,UAAK,GAAG;YACb,SAAS,EAAE,KAAK;YAChB,KAAK,EAAE;gBACL,EAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAC;gBAClD,EAAC,KAAK,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,IAAI,EAAE,EAAE,MAAM,EAAE,aAAa,EAAC;gBAC5E;oBACE,SAAS,EAAE,IAAI;oBACf,KAAK,EAAE;wBACL,EAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE,UAAU,EAAC;wBACpD,EAAC,KAAK,EAAE,YAAY,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,aAAa,EAAC;wBAC5D,EAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,EAAE,aAAa,EAAC;wBAC7D,EAAC,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE,aAAa,EAAC;qBACvD;iBACF;aACF;SACF,CAAC;QAEK,iBAAY,GAAuB;YACxC,QAAQ,EAAE;gBACR,QAAQ,EAAE,EAAC,IAAI,EAAE,qBAAqB,EAAC;gBACvC,WAAW,EAAE,EAAC,IAAI,EAAE,wBAAwB,EAAC;aAC9C;YACD,MAAM,EAAE;gBACN,GAAG,EAAE,EAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,UAAU,EAAC;gBACtD,MAAM,EAAE;oBACN,IAAI,EAAE,QAAQ;oBACd,MAAM,EAAE,UAAU;oBAClB,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACP,EAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,EAAC;wBAC1B,EAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,EAAC;qBAC7B;iBACF;gBACD,IAAI,EAAE,EAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,aAAa,EAAC;gBAC3D,KAAK,EAAE,EAAC,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,MAAM,EAAE,aAAa,EAAC;gBACvF,QAAQ,EAAE,EAAC,IAAI,EAAE,iBAAiB,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,aAAa,EAAC;gBAC3E,QAAQ,EAAE,EAAC,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC;oBACpE,YAAY,EAAE,CAAC,cAAM,WAAI,IAAI,EAAE,EAAV,CAAU,CAAC,EAAE,MAAM,EAAE,aAAa;iBACxD;gBACD,MAAM,EAAE,EAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,aAAa,EAAC;gBAC/E,UAAU,EAAE;oBACV,IAAI,EAAE,YAAY;oBAClB,MAAM,EAAE,aAAa;oBACrB,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACP,EAAC,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAC;wBACnC,EAAC,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAC;wBACnC,EAAC,IAAI,EAAE,YAAY,EAAE,KAAK,EAAE,YAAY,EAAC;wBACzC,EAAC,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,WAAW,EAAC;qBACxC;iBACF;aACF;SACF,CAAC;QAEK,WAAM,GAAuB;YAClC,MAAM,EAAE;gBACN,GAAG,EAAE,EAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAC;gBAClC,MAAM,EAAE;oBACN,IAAI,EAAE,QAAQ;oBACd,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACP,EAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,EAAC;wBAC1B,EAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,EAAC;qBAC7B;iBACF;gBACD,IAAI,EAAE,EAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAC;gBACpC,KAAK,EAAE,EAAC,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,CAAC,GAAG,EAAE,IAAI,CAAC,EAAC;gBAChE,QAAQ,EAAE,EAAC,IAAI,EAAE,iBAAiB,EAAE,IAAI,EAAE,SAAS,EAAC;gBACpD,QAAQ,EAAE,EAAC,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC;oBACpE,YAAY,EAAE,CAAC,cAAM,WAAI,IAAI,EAAE,EAAV,CAAU,CAAC;iBACjC;gBACD,MAAM,EAAE,EAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAC;gBACxD,UAAU,EAAE;oBACV,IAAI,EAAE,YAAY;oBAClB,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE;wBACP,EAAC,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAC;wBACnC,EAAC,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAC;wBACnC,EAAC,IAAI,EAAE,YAAY,EAAE,KAAK,EAAE,YAAY,EAAC;wBACzC,EAAC,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,WAAW,EAAC;qBACxC;iBACF;aACF;SACF,CAAC;QAGK,iBAAY,GAAY,IAAI,CAAC;QAE7B,8BAAyB,GAAY,KAAK,CAAC;QAKhD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACtD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC;IACnC,CAAC;IAED,kCAAW,GAAX,UAAY,KAAY;QACtB,IAAI,CAAC,aAAa,GAAsB,KAAK,CAAC,MAAO,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;IAClG,CAAC;IAED,qCAAc,GAAd,UAAe,KAAY;QACN,KAAK,CAAC,MAAO,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;IAChG,CAAC;;gBAZsB,0DAAW;;IAzHvB,YAAY;QA1LxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;YACpB,QAAQ,EAAE,orOAkJT;;SAqCF,CAAC;yCA0HuB,0DAAW;OAzHvB,YAAY,CAsIxB;IAAD,mBAAC;CAAA;AAtIwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9LyC;AACzB;AACiB;AACX;AAE6B;AAWjD;AAEiC;AAsB5D;IAAA;IACA,CAAC;IADY,SAAS;QApBrB,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,uEAAa;gBACb,0DAAW;gBACX,kEAAmB;gBACnB,yFAAoB;gBACpB,iEAAe;gBACf,mEAAiB;gBACjB,iEAAe;gBACf,gEAAc;gBACd,qEAAmB;gBACnB,qEAAmB;gBACnB,gEAAc;gBACd,+DAAa;gBACb,+DAAa;gBACb,yEAAkB;aACnB;YACD,YAAY,EAAE,CAAE,2DAAY,CAAE;YAC9B,SAAS,EAAE,CAAE,2DAAY,CAAE;SAC5B,CAAC;OACW,SAAS,CACrB;IAAD,gBAAC;CAAA;AADqB;;;;;;;;;;;;;ACxCtB;AAAA;AAAA,gFAAgF;AAChF,2EAA2E;AAC3E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;GAKG;AACH,mEAAmE;;;;;;;;;;;;;ACdnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC4B;AAE9B;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAhB,CAAgB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { FormBuilder, FormControl } from '@angular/forms';\nimport { Component } from '@angular/core';\nimport { QueryBuilderClassNames, QueryBuilderConfig } from 'angular2-query-builder';\n\n@Component({\n  selector: 'app-root',\n  template: `\n  <h2>Vanilla</h2>\n  <br>\n  <query-builder [formControl]='queryCtrl' [config]='currentConfig' [allowRuleset]='allowRuleset' [allowCollapse]='allowCollapse' [persistValueOnFieldChange]='persistValueOnFieldChange'>\n    <ng-container *queryInput=\"let rule; type: 'textarea'; let getDisabledState=getDisabledState\">\n      <textarea class=\"text-input text-area\" [(ngModel)]=\"rule.value\" [disabled]=getDisabledState()\n        placeholder=\"Custom Textarea\"></textarea>\n    </ng-container>\n  </query-builder>\n  <br>\n  <div>\n    <div class=\"row\">\n      <p class=\"col-6\">Control Valid (Vanilla): {{ queryCtrl.valid }}</p>\n      <div class=\"col-6\">\n        <label><input type=\"checkbox\" (change)=switchModes($event)>Entity Mode</label>\n      </div>\n    </div>\n    <div class=\"row\">\n      <p class=\"col-6\">Control Touched (Vanilla): {{ queryCtrl.touched }}</p>\n      <div class=\"col-6\">\n        <label><input type=\"checkbox\" (change)=changeDisabled($event)>Disabled</label>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-6\">\n        <label><input type=\"checkbox\" [(ngModel)]='allowRuleset'>Allow Ruleset</label>\n      </div>\n      <div class=\"col-6\">\n        <label><input type=\"checkbox\" [(ngModel)]='allowCollapse'>Allow Collapse</label>\n      </div>\n      <div class=\"col-6\">\n        <label><input type=\"checkbox\" [(ngModel)]='persistValueOnFieldChange'>Persist Values on Field Change</label>\n      </div>\n    </div>\n\n    <textarea class=\"output\">{{query | json}}</textarea>\n  </div>\n  <br>\n  <h2>Custom Material</h2>\n  <br>\n  <mat-card>\n  <query-builder [(ngModel)]='query' [config]='currentConfig' [allowRuleset]='allowRuleset' [allowCollapse]='allowCollapse' [persistValueOnFieldChange]='persistValueOnFieldChange'>\n    <ng-container *queryButtonGroup=\"let ruleset; let addRule=addRule; let addRuleSet=addRuleSet; let removeRuleSet=removeRuleSet\">\n      <button type=\"button\" mat-icon-button color=\"primary\" (click)=\"addRule()\">\n        <mat-icon>add</mat-icon></button>\n      <button type=\"button\" mat-icon-button color=\"primary\" *ngIf=\"addRuleSet\" (click)=\"addRuleSet()\">\n        <mat-icon>add_circle_outline</mat-icon></button>\n      <button type=\"button\" mat-icon-button color=\"accent\" *ngIf=\"removeRuleSet\" (click)=\"removeRuleSet()\">\n        <mat-icon>remove_circle_outline</mat-icon></button>\n    </ng-container>\n    <ng-container *queryArrowIcon>\n      <mat-icon ngClass=\"mat-arrow-icon\">chevron_right</mat-icon>\n    </ng-container>\n    <ng-container *queryRemoveButton=\"let rule; let removeRule=removeRule\">\n      <button type=\"button\" mat-icon-button color=\"accent\" (click)=\"removeRule(rule)\">\n        <mat-icon>remove</mat-icon>\n      </button>\n    </ng-container>\n    <ng-container *querySwitchGroup=\"let ruleset; let onChange=onChange\">\n      <mat-radio-group *ngIf=\"ruleset\" [(ngModel)]=\"ruleset.condition\" (ngModelChange)=\"onChange($event)\">\n        <mat-radio-button [style.padding.px]=\"10\" value=\"and\">And</mat-radio-button>\n        <mat-radio-button [style.padding.px]=\"10\" value=\"or\">Or</mat-radio-button>\n      </mat-radio-group>\n    </ng-container>\n    <ng-container *queryEntity=\"let rule; let entities=entities; let onChange=onChange\">\n      <mat-form-field>\n        <mat-select [(ngModel)]=\"rule.entity\" (ngModelChange)=\"onChange($event, rule)\">\n          <mat-option *ngFor=\"let entity of entities\" [value]=\"entity.value\">\n          {{entity.name}}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </ng-container>\n    <ng-container *queryField=\"let rule; let fields=fields; let onChange=onChange; let getFields = getFields\">\n      <mat-form-field>\n        <mat-select [(ngModel)]=\"rule.field\" (ngModelChange)=\"onChange($event, rule)\">\n          <mat-option *ngFor=\"let field of getFields(rule.entity)\" [value]=\"field.value\">\n            {{ field.name }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </ng-container>\n    <ng-container *queryOperator=\"let rule; let operators=operators; let onChange=onChange\">\n      <mat-form-field [style.width.px]=\"90\">\n        <mat-select [(ngModel)]=\"rule.operator\" (ngModelChange)=\"onChange(rule)\">\n          <mat-option *ngFor=\"let value of operators\" [value]=\"value\">\n            {{ value }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </ng-container>\n    <ng-container *queryInput=\"let rule; type: 'boolean'; let onChange=onChange\">\n      <mat-checkbox [(ngModel)]=\"rule.value\" (ngModelChange)=\"onChange()\"></mat-checkbox>\n    </ng-container>\n    <ng-container *queryInput=\"let rule; let field=field; let options=options; type: 'category'; let onChange=onChange\">\n      <mat-form-field>\n        <mat-select [(ngModel)]=\"rule.value\" (ngModelChange)=\"onChange()\">\n          <mat-option *ngFor=\"let opt of options\" [value]=\"opt.value\">\n            {{ opt.name }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </ng-container>\n    <ng-container *queryInput=\"let rule; type: 'date'; let onChange=onChange\">\n      <mat-form-field>\n        <input matInput [matDatepicker]=\"picker\" [(ngModel)]=\"rule.value\" (ngModelChange)=\"onChange()\">\n        <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n        <mat-datepicker #picker></mat-datepicker>\n      </mat-form-field>\n    </ng-container>\n    <ng-container *queryInput=\"let rule; let options=options; type: 'multiselect'; let onChange=onChange\">\n      <mat-form-field [style.width.px]=\"300\">\n        <mat-select [(ngModel)]=\"rule.value\" multiple (ngModelChange)=\"onChange()\">\n          <mat-option *ngFor=\"let opt of options\" [value]=\"opt.value\">\n            {{ opt.name }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </ng-container>\n    <ng-container *queryInput=\"let rule; let field=field; type: 'number'; let onChange=onChange\">\n      <mat-form-field [style.width.px]=\"50\">\n        <input matInput [(ngModel)]=\"rule.value\" type=\"number\" (ngModelChange)=\"onChange()\">\n      </mat-form-field>\n    </ng-container>\n    <ng-container *queryInput=\"let rule; let field=field; type: 'string'; let onChange=onChange\">\n      <mat-form-field>\n        <input matInput [(ngModel)]=\"rule.value\" (ngModelChange)=\"onChange()\">\n      </mat-form-field>\n    </ng-container>\n    <ng-container *queryInput=\"let rule; let field=field; type: 'textarea'; let onChange=onChange\">\n      <mat-form-field>\n        <textarea matInput [(ngModel)]=\"rule.value\" (ngModelChange)=\"onChange()\">\n        </textarea>\n      </mat-form-field>\n    </ng-container>\n  </query-builder>\n  </mat-card>\n  <br>\n  <h2>Bootstrap</h2>\n  <br>\n  <query-builder [(ngModel)]='query' [classNames]='bootstrapClassNames' [config]='currentConfig' [allowRuleset]='allowRuleset' [allowCollapse]='allowCollapse' [persistValueOnFieldChange]='persistValueOnFieldChange'>\n    <div class=\"col-auto\" *queryInput=\"let rule; type: 'textarea'\">\n      <textarea class=\"form-control\" [(ngModel)]=\"rule.value\"\n        placeholder=\"Custom Textarea\"></textarea>\n    </div>\n  </query-builder>\n  `,\n  styles: [`\n  /deep/ html {\n    font: 14px sans-serif;\n    margin: 30px;\n  }\n\n  .mat-icon-button {\n    outline: none;\n  }\n\n  .mat-arrow-icon {\n    outline: none;\n    line-height: 32px;\n  }\n\n  .mat-form-field {\n    padding-left: 5px;\n    padding-right: 5px;\n  }\n\n  .text-input {\n    padding: 4px 8px;\n    border-radius: 4px;\n    border: 1px solid #ccc;\n  }\n\n  .text-area {\n    width: 300px;\n    height: 100px;\n  }\n\n  .output {\n    width: 100%;\n    height: 300px;\n  }\n  `]\n})\nexport class AppComponent {\n  public queryCtrl: FormControl;\n\n  public bootstrapClassNames: QueryBuilderClassNames = {\n    removeIcon: 'fa fa-minus',\n    addIcon: 'fa fa-plus',\n    arrowIcon: 'fa fa-chevron-right px-2',\n    button: 'btn',\n    buttonGroup: 'btn-group',\n    rightAlign: 'order-12 ml-auto',\n    switchRow: 'd-flex px-2',\n    switchGroup: 'd-flex align-items-center',\n    switchRadio: 'custom-control-input',\n    switchLabel: 'custom-control-label',\n    switchControl: 'custom-control custom-radio custom-control-inline',\n    row: 'row p-2 m-1',\n    rule: 'border',\n    ruleSet: 'border',\n    invalidRuleSet: 'alert alert-danger',\n    emptyWarning: 'text-danger mx-auto',\n    operatorControl: 'form-control',\n    operatorControlSize: 'col-auto pr-0',\n    fieldControl: 'form-control',\n    fieldControlSize: 'col-auto pr-0',\n    entityControl: 'form-control',\n    entityControlSize: 'col-auto pr-0',\n    inputControl: 'form-control',\n    inputControlSize: 'col-auto'\n  };\n\n  public query = {\n    condition: 'and',\n    rules: [\n      {field: 'age', operator: '<=', entity: 'physical'},\n      {field: 'birthday', operator: '=', value: new Date(), entity: 'nonphysical'},\n      {\n        condition: 'or',\n        rules: [\n          {field: 'gender', operator: '=', entity: 'physical'},\n          {field: 'occupation', operator: 'in', entity: 'nonphysical'},\n          {field: 'school', operator: 'is null', entity: 'nonphysical'},\n          {field: 'notes', operator: '=', entity: 'nonphysical'}\n        ]\n      }\n    ]\n  };\n\n  public entityConfig: QueryBuilderConfig = {\n    entities: {\n      physical: {name: 'Physical Attributes'},\n      nonphysical: {name: 'Nonphysical Attributes'}\n    },\n    fields: {\n      age: {name: 'Age', type: 'number', entity: 'physical'},\n      gender: {\n        name: 'Gender',\n        entity: 'physical',\n        type: 'category',\n        options: [\n          {name: 'Male', value: 'm'},\n          {name: 'Female', value: 'f'}\n        ]\n      },\n      name: {name: 'Name', type: 'string', entity: 'nonphysical'},\n      notes: {name: 'Notes', type: 'textarea', operators: ['=', '!='], entity: 'nonphysical'},\n      educated: {name: 'College Degree?', type: 'boolean', entity: 'nonphysical'},\n      birthday: {name: 'Birthday', type: 'date', operators: ['=', '<=', '>'],\n        defaultValue: (() => new Date()), entity: 'nonphysical'\n      },\n      school: {name: 'School', type: 'string', nullable: true, entity: 'nonphysical'},\n      occupation: {\n        name: 'Occupation',\n        entity: 'nonphysical',\n        type: 'category',\n        options: [\n          {name: 'Student', value: 'student'},\n          {name: 'Teacher', value: 'teacher'},\n          {name: 'Unemployed', value: 'unemployed'},\n          {name: 'Scientist', value: 'scientist'}\n        ]\n      }\n    }\n  };\n\n  public config: QueryBuilderConfig = {\n    fields: {\n      age: {name: 'Age', type: 'number'},\n      gender: {\n        name: 'Gender',\n        type: 'category',\n        options: [\n          {name: 'Male', value: 'm'},\n          {name: 'Female', value: 'f'}\n        ]\n      },\n      name: {name: 'Name', type: 'string'},\n      notes: {name: 'Notes', type: 'textarea', operators: ['=', '!=']},\n      educated: {name: 'College Degree?', type: 'boolean'},\n      birthday: {name: 'Birthday', type: 'date', operators: ['=', '<=', '>'],\n        defaultValue: (() => new Date())\n      },\n      school: {name: 'School', type: 'string', nullable: true},\n      occupation: {\n        name: 'Occupation',\n        type: 'category',\n        options: [\n          {name: 'Student', value: 'student'},\n          {name: 'Teacher', value: 'teacher'},\n          {name: 'Unemployed', value: 'unemployed'},\n          {name: 'Scientist', value: 'scientist'}\n        ]\n      }\n    }\n  };\n\n  public currentConfig: QueryBuilderConfig;\n  public allowRuleset: boolean = true;\n  public allowCollapse: boolean;\n  public persistValueOnFieldChange: boolean = false;\n\n  constructor(\n    private formBuilder: FormBuilder\n  ) {\n    this.queryCtrl = this.formBuilder.control(this.query);\n    this.currentConfig = this.config;\n  }\n\n  switchModes(event: Event) {\n    this.currentConfig = (<HTMLInputElement>event.target).checked ? this.entityConfig : this.config;\n  }\n\n  changeDisabled(event: Event) {\n    (<HTMLInputElement>event.target).checked ? this.queryCtrl.disable() : this.queryCtrl.enable();\n  }\n}\n","import { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppComponent } from './app.component';\n\nimport { NoopAnimationsModule } from '@angular/platform-browser/animations';\nimport {\n  MatButtonModule,\n  MatCheckboxModule,\n  MatSelectModule,\n  MatInputModule,\n  MatDatepickerModule,\n  MatNativeDateModule,\n  MatRadioModule,\n  MatIconModule,\n  MatCardModule\n} from '@angular/material';\n\nimport { QueryBuilderModule } from 'angular2-query-builder';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule,\n    ReactiveFormsModule,\n    NoopAnimationsModule,\n    MatButtonModule,\n    MatCheckboxModule,\n    MatSelectModule,\n    MatInputModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatRadioModule,\n    MatIconModule,\n    MatCardModule,\n    QueryBuilderModule\n  ],\n  declarations: [ AppComponent ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}